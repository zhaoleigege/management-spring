/*
 * This file is generated by jOOQ.
*/
package cn.edu.bnuz.jooq.tables;


import cn.edu.bnuz.jooq.Indexes;
import cn.edu.bnuz.jooq.Keys;
import cn.edu.bnuz.jooq.MuduoCloud;
import cn.edu.bnuz.jooq.tables.records.StuffRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.6"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Stuff extends TableImpl<StuffRecord> {

    private static final long serialVersionUID = -1278376519;

    /**
     * The reference instance of <code>muduo_cloud.stuff</code>
     */
    public static final Stuff STUFF = new Stuff();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<StuffRecord> getRecordType() {
        return StuffRecord.class;
    }

    /**
     * The column <code>muduo_cloud.stuff.stuff_id</code>. 失物找寻表的id
     */
    public final TableField<StuffRecord, Integer> STUFF_ID = createField("stuff_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "失物找寻表的id");

    /**
     * The column <code>muduo_cloud.stuff.number</code>. 发布人的账号
     */
    public final TableField<StuffRecord, String> NUMBER = createField("number", org.jooq.impl.SQLDataType.VARCHAR(20).nullable(false), this, "发布人的账号");

    /**
     * The column <code>muduo_cloud.stuff.type</code>. loss(丢失自己的物品)、stick(捡到别人的物品)
     */
    public final TableField<StuffRecord, String> TYPE = createField("type", org.jooq.impl.SQLDataType.VARCHAR(5).nullable(false), this, "loss(丢失自己的物品)、stick(捡到别人的物品)");

    /**
     * The column <code>muduo_cloud.stuff.phone</code>. 发布人留下的联系方式
     */
    public final TableField<StuffRecord, String> PHONE = createField("phone", org.jooq.impl.SQLDataType.VARCHAR(11).nullable(false), this, "发布人留下的联系方式");

    /**
     * The column <code>muduo_cloud.stuff.description</code>. 物品的简单描述
     */
    public final TableField<StuffRecord, String> DESCRIPTION = createField("description", org.jooq.impl.SQLDataType.VARCHAR(200).nullable(false), this, "物品的简单描述");

    /**
     * The column <code>muduo_cloud.stuff.images</code>. 图片的json格式存储
     */
    public final TableField<StuffRecord, String> IMAGES = createField("images", org.jooq.impl.SQLDataType.VARCHAR(120).nullable(false), this, "图片的json格式存储");

    /**
     * The column <code>muduo_cloud.stuff.create_time</code>. 发布的时间
     */
    public final TableField<StuffRecord, Timestamp> CREATE_TIME = createField("create_time", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "发布的时间");

    /**
     * Create a <code>muduo_cloud.stuff</code> table reference
     */
    public Stuff() {
        this(DSL.name("stuff"), null);
    }

    /**
     * Create an aliased <code>muduo_cloud.stuff</code> table reference
     */
    public Stuff(String alias) {
        this(DSL.name(alias), STUFF);
    }

    /**
     * Create an aliased <code>muduo_cloud.stuff</code> table reference
     */
    public Stuff(Name alias) {
        this(alias, STUFF);
    }

    private Stuff(Name alias, Table<StuffRecord> aliased) {
        this(alias, aliased, null);
    }

    private Stuff(Name alias, Table<StuffRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return MuduoCloud.MUDUO_CLOUD;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.STUFF_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<StuffRecord, Integer> getIdentity() {
        return Keys.IDENTITY_STUFF;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<StuffRecord> getPrimaryKey() {
        return Keys.KEY_STUFF_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<StuffRecord>> getKeys() {
        return Arrays.<UniqueKey<StuffRecord>>asList(Keys.KEY_STUFF_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Stuff as(String alias) {
        return new Stuff(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Stuff as(Name alias) {
        return new Stuff(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Stuff rename(String name) {
        return new Stuff(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Stuff rename(Name name) {
        return new Stuff(name, null);
    }
}
